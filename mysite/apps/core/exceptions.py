from rest_framework.views import exception_handler


def core_exception_handler(exc, context):
    # If an exception is thrown that we don't explicitly handle here, Delegate
    # to the default exception handler offered by DRF. If we do handle this
    # exception type, we will still want access to the response generated by DRF.
    response = exception_handler(exc, context)
    handlers = {
        'NotFound': _handle_generic_error,
        'ValidationError': _handle_generic_error
    }
    # This is how to identify the type of the current exception.
    exception_class = exc.__class__.__name__

    if exception_class in handlers:
        # If this exception is one that we can handle, handle it. Otherwise,
        # return the response generated by the default exception handler.
        return handlers[exception_class](exc, context, response)

    return response


def _handle_generic_error(exc, context, response):
    # Take the response generated by DRF and wrap it in the `errors` key.
    response.data = {
        'errors': response.data
    }

    return response
